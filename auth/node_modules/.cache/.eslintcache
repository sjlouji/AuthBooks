[{"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/index.js":"1","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/App.js":"2","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Route/route.js":"3","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/configureStore.js":"4","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Auth/Login/LoginPage.js":"5","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Auth/Register/RegisterPage.js":"6","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Auth/ResetPassword/RequestPassword.js":"7","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/Reducer/index.js":"8","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/Action/auth.js":"9","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Components/TextField/AuthField.js":"10","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/Reducer/auth.js":"11","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/Action/types.js":"12","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Auth/ResetPassword/ResetPassword.js":"13","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Dashboard/Index/Dashboard.js":"14","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Dashboard/Home.js":"15","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Route/PrivateRoute.js":"16","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Components/Sidebar/Sidebar.js":"17"},{"size":71,"mtime":1619367733848,"results":"18","hashOfConfig":"19"},{"size":935,"mtime":1619368615061,"results":"20","hashOfConfig":"19"},{"size":989,"mtime":1619370146859,"results":"21","hashOfConfig":"19"},{"size":382,"mtime":1619367733847,"results":"22","hashOfConfig":"19"},{"size":6433,"mtime":1619368769960,"results":"23","hashOfConfig":"19"},{"size":9505,"mtime":1619368775384,"results":"24","hashOfConfig":"19"},{"size":5458,"mtime":1619368781103,"results":"25","hashOfConfig":"19"},{"size":112,"mtime":1619367733847,"results":"26","hashOfConfig":"19"},{"size":4873,"mtime":1619368545787,"results":"27","hashOfConfig":"19"},{"size":2861,"mtime":1619367733841,"results":"28","hashOfConfig":"19"},{"size":2572,"mtime":1619368675000,"results":"29","hashOfConfig":"19"},{"size":1242,"mtime":1619367733846,"results":"30","hashOfConfig":"19"},{"size":4637,"mtime":1619368796572,"results":"31","hashOfConfig":"19"},{"size":236,"mtime":1619370120317,"results":"32","hashOfConfig":"19"},{"size":942,"mtime":1619370750652,"results":"33","hashOfConfig":"19"},{"size":595,"mtime":1619370173849,"results":"34","hashOfConfig":"19"},{"size":4372,"mtime":1619370721091,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"7px8bh",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/index.js",["75"],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/App.js",[],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Route/route.js",[],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/configureStore.js",[],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Auth/Login/LoginPage.js",["76","77"],"import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport AuthField from '../../../Components/TextField/AuthField';\nimport { withRouter } from 'react-router-dom';\nimport { login } from '../../../Store/Action/auth'\nimport { connect } from 'react-redux';\nimport {Alert} from 'react-bootstrap';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './Login.css';\n\nconst styles = theme => ({\n    cssFocused: {\n        borderWidth: '1px',\n        borderColor: '#1a73e8 !important'\n    },\n    notchedOutline: {\n        borderWidth: '1px',\n        borderColor: 'grey !important'\n    },\n    checkBox: {\n        fontSize: '13px',\n    },\n});\n\nexport class LoginPage extends Component {\n\n    // State\n    state = {\n        email: '',\n        password: '',\n        hidden: true,\n        emailError: '',\n        passwordError: '',\n        commonError: ''\n    }\n\n    //  Constructor to bind function with state\n    constructor(props) {\n        super(props)\n        this.handleLogin = this.handleLogin.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.handlePasswordToogle = this.handlePasswordToogle.bind(this)\n        this.flushError = this.flushError.bind(this)\n    } \n\n    // Navigate\n    navigate(route) {\n        this.props.history.push(route);\n    }\n\n    //Handle Password Visibility\n    handlePasswordToogle() {\n        this.setState({ hidden: !this.state.hidden });\n    }\n\n    // Makes Error null\n    flushError() {\n        this.setState({\n            emailError: '',\n            passwordError: '',\n            commonError: ''\n        })\n    }\n\n    //  Hadles change of text in textfield \n    onChange(e){\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    //  Recieves new props. Primarily used for Error Handling\n    componentWillReceiveProps(nextProps){\n        if(nextProps.error !== undefined){\n            if(nextProps.error.message === 'Network Error'){\n                this.setState({commonError: nextProps.error.message})\n            }else{\n                nextProps.error.response.data && nextProps.error.response.data.error.map((el => {\n                    if(el.type === 'email') this.setState({emailError: el.message})\n                    if(el.type === 'password') this.setState({passwordError: el.message})\n                    if(!el.type) this.setState({commonError: el.message})\n                }))\n            }\n        }\n    }\n\n    //  Handles Login\n    handleLogin(e){\n        e.preventDefault();\n        if (!this.state.email && !this.state.password) {return this.setState({ emailError: 'Enter a Email address', passwordError: 'Enter your password' })} else {this.flushError()}\n        if (!this.state.email) {return this.setState({ emailError: 'Enter a Email address' })} else {this.flushError()}\n        if (!this.state.password) {return this.setState({ passwordError: 'Enter your password' })} else {this.flushError()}\n        this.flushError();\n        const body = { email: this.state.email, password: this.state.password } \n        // Login\n        this.props.login(body)\n    }\n    \n    render() {\n        const { classes } = this.props;\n        if(this.props.isAuthenticated) {\n            this.navigate('/')\n        }\n        return (\n            <div class=\"LoginBox\">\n                <Typography className=\"headerName\" component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <Typography className=\"headerDesc\" variant=\"subtitle1\">\n                    Use your Books Account\n                </Typography>\n                <form className=\"loginForm\">\n                    <AuthField \n                        name=\"email\" \n                        placeholder=\"Email\" \n                        label=\"Email\" \n                        error = {this.state.emailError} \n                        onChange={this.onChange} \n                        value={this.state.email}/>\n                    <AuthField \n                        name=\"password\" \n                        placeholder=\"Password\" \n                        label=\"Password\"    \n                        error = {this.state.passwordError} \n                        onChange={this.onChange} \n                        value={this.state.password} \n                        hidden={this.state.hidden}/>\n                    {this.state.commonError ? <Alert variant=\"danger\">{this.state.commonError}</Alert> : ''}\n                    <Grid container spacing={3}>\n                        <Grid item xs={6}>\n                            <FormControlLabel\n                                value=\"top\"\n                                classes={{ label: classes.checkBox }}\n                                control={<Checkbox color=\"primary\" size=\"small\" checkBox={this.state.hidden} onChange={this.handlePasswordToogle}/>}\n                                label=\"Show password\"\n                                labelPlacement=\"right\"/>\n                            <Button className=\"forgotButton\" onClick={()=>this.navigate('/auth/reset')} color=\"primary\">Forgot Password</Button>                        \n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button className=\"loginButton\" variant=\"contained\" onClick={this.handleLogin} disabled={this.props.authLoading ? true : false}>{this.props.authLoading ? 'Loading' : 'Login'}</Button>                        \n                        </Grid>\n                    </Grid>\n                </form>\n                <Typography className=\"orClass\" style={{ marginTop: '15px' }} variant=\"subtitle1\">\n                    or\n                </Typography>\n                <Button className=\"createButton\" color=\"primary\" onClick={()=>this.navigate('/auth/register')}>Don't have an account.  Create one</Button>\n            </div>\n        );\n    }\n}\n\n//  Map state to props\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    isLoading: state.auth.isLoading,\n    authLoading: state.auth.authLoading,\n    error: state.auth.error\n});\n\nexport default connect(mapStateToProps, {login})(withRouter(withStyles(styles)(LoginPage)));\n",["78","79"],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Auth/Register/RegisterPage.js",["80","81"],"import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport AuthField from '../../../Components/TextField/AuthField';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { register } from '../../../Store/Action/auth';\nimport {Alert} from 'react-bootstrap';\nimport './Register.css';\n\nconst styles = theme => ({\n    cssFocused: {\n        borderWidth: '1px',\n        borderColor: '#1a73e8 !important'\n    },\n    notchedOutline: {\n        borderWidth: '1px',\n        borderColor: 'grey !important'\n    },\n    checkBox: {\n        fontSize: '13px',\n    },\n});\n\nexport class RegisterPage extends Component {\n\n    // State\n    state = {\n        email: '',\n        firstName: '',\n        lastName: '',\n        mobile: '',\n        password: '',\n        confirmPassword: '',\n        hidden: true,\n        emailError: '',\n        passwordError: '',\n        firstNameError: '',\n        lastNameError: '',\n        confirmError: '',\n        mobileError: '',\n        confirmPasswordError: '',\n        commonError: '',\n    }\n\n    //  Constructor to bind function with state\n    constructor(props) {\n        super(props)\n        this.handleRegister = this.handleRegister.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.handlePasswordToogle = this.handlePasswordToogle.bind(this)\n        this.flushError = this.flushError.bind(this)\n    } \n\n    //Handle Password Visibility\n    handlePasswordToogle() {\n        this.setState({ hidden: !this.state.hidden });\n    }\n\n    // Makes Error null\n    flushError() {\n        this.setState({\n            firstNameError: '',\n            lastNameError: '',\n            emailError: '',\n            passwordError: '',\n            confirmPasswordError: '',\n            commonError: '',\n        })\n    }\n\n\n    //  Recieves new props. Primarily used for Error Handling\n    componentWillReceiveProps(nextProps){\n        if(nextProps.error !== undefined){\n            if(nextProps.error.message === 'Network Error'){\n                this.setState({commonError: nextProps.error.message})\n            }else{\n                if(nextProps.error.response.data && nextProps.error.response.data.error) {\n                    nextProps.error.response.data.error.map(el => {\n                        if(el.type === 'password') this.setState({passwordError: el.message})\n                        if(el.type === 'email') this.setState({emailError: el.message})\n                        if(el.type === 'firstName') this.setState({firstNameError: el.message})\n                        if(el.type === 'lastName') this.setState({laseNameError: el.message})\n                        if(!el.type) this.setState({commonError: el.message})\n                    })\n                }\n            }\n        }\n    }\n\n    // Navigate to pages\n    navigate(route) {\n        this.props.history.push(route);\n    }\n    \n    //  Hadles change of text in textfield \n    onChange(e){\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    //  Handles Login\n    handleRegister(e){\n        e.preventDefault();\n        if (!this.state.firstName) {return this.setState({ firstNameError: 'First Name is Required' })} else {this.flushError()}\n        if (!this.state.lastName) {return this.setState({ lastNameError: 'Last Name is Required' })} else {this.flushError()}\n        if (!this.state.email) {return this.setState({ emailError: 'Enter a Email address' })} else {this.flushError()}\n        if (!this.state.password) {return this.setState({ passwordError: 'Enter your password' })} else {this.flushError()}\n        if (!this.state.confirmPassword) {return this.setState({ confirmPasswordError: 'Confirm Password again' })} else {this.flushError()}\n        if (this.state.password !== this.state.confirmPassword) {return this.setState({ confirmPasswordError: 'Password mismatch',  passwordError: 'Password mismatch' })} else {this.flushError()}\n        this.flushError();\n        const body = { firstName: this.state.firstName, lastName: this.state.lastName, email: this.state.email, password: this.state.password }\n        this.props.register(body)\n    }\n    \n    render() {\n        const { classes } = this.props;\n        if(this.props.isAuthenticated) {\n            this.navigate('/')\n        }\n        return (\n            <div class=\"box\">\n                <Typography className=\"headerName\" component=\"h1\" variant=\"h5\">\n                    Sign up\n                </Typography>\n                <Typography className=\"headerDesc\" variant=\"subtitle1\">\n                    Create your Books Account\n                </Typography>\n                <form className=\"loginForm\">\n                    <Grid container xs={12}>\n                        <Grid item xs={6} style={{padding: '5px'}}> \n                            <AuthField \n                                name=\"firstName\" \n                                placeholder=\"First Name\" \n                                margin='small'\n                                label=\"First Name\" \n                                error = {this.state.firstNameError} \n                                onChange={this.onChange} \n                                value={this.state.firstName}/>\n                        </Grid>\n                        <Grid item xs={6} style={{padding: '5px'}}>\n                            <AuthField \n                                name=\"lastName\" \n                                placeholder=\"Last Name\" \n                                margin='small'\n                                label=\"Last Name\" \n                                error = {this.state.lastNameError} \n                                onChange={this.onChange} \n                                value={this.state.lastName}/>                            \n                        </Grid>\n                        <Grid item xs = {12} style={{padding: '5px', marginTop: '10px'}}>\n                            <AuthField \n                                name=\"email\" \n                                placeholder=\"Email\" \n                                margin='small'\n                                label=\"Email\" \n                                error = {this.state.emailError} \n                                onChange={this.onChange} \n                                value={this.state.email}/>\n                        </Grid>\n                        <Grid item xs = {12} style={{padding: '5px'}}>\n                            <AuthField \n                                name=\"password\" \n                                placeholder=\"Password\" \n                                label=\"Password\"    \n                                error = {this.state.passwordError} \n                                onChange={this.onChange} \n                                value={this.state.password} \n                                hidden={this.state.hidden}/>\n                        </Grid>\n                        <Grid item xs = {12} style={{padding: '5px'}}>\n                            <AuthField \n                                name=\"confirmPassword\" \n                                placeholder=\"confirmPassword\" \n                                label=\"Password\"    \n                                error = {this.state.confirmPasswordError}\n                                onChange={this.onChange} \n                                value={this.state.confirmPassword} \n                                hidden={this.state.hidden}/>\n                        </Grid>\n                    </Grid>\n                    {this.state.commonError ? <Alert variant=\"danger\">{this.state.commonError}</Alert> : ''}\n                    <Grid container spacing={3}>\n                        <Grid item xs={6}>\n                            <FormControlLabel\n                                value=\"top\"\n                                classes={{ label: classes.checkBox }}\n                                control={<Checkbox color=\"primary\" size=\"small\" checkBox={this.state.hidden} onChange={this.handlePasswordToogle}/>}\n                                label=\"Show password\"\n                                labelPlacement=\"right\"/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button className=\"loginButton\" variant=\"contained\" onClick={this.handleRegister} disabled={this.props.authLoading ? true : false}>{this.props.authLoading ? 'Loading' : 'Register'}</Button>                        \n                        </Grid>\n                    </Grid>\n                </form>\n                <Typography className=\"orClass\" style={{ marginTop: '15px' }} variant=\"subtitle1\">\n                    or\n                </Typography>\n                <Button className=\"createButton\" color=\"primary\" onClick={()=>this.navigate('/auth/login')}>Have an account.  Login in</Button>\n            </div>\n        );\n    }\n}\n\n\n//  Map state to props\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    isLoading: state.auth.isLoading,\n    authLoading: state.auth.authLoading,\n    error: state.auth.error\n});\n  \n\nexport default connect(mapStateToProps, {register})(withRouter(withStyles(styles)(RegisterPage)));\n","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Auth/ResetPassword/RequestPassword.js",["82","83"],"import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport AuthField from '../../../Components/TextField/AuthField';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { resetPassword } from '../../../Store/Action/auth';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport './RequestPassword.css';\n\nconst styles = theme => ({\n    cssFocused: {\n        borderWidth: '1px',\n        borderColor: '#1a73e8 !important'\n    },\n    notchedOutline: {\n        borderWidth: '1px',\n        borderColor: 'grey !important'\n    },\n    checkBox: {\n        fontSize: '13px',\n    },\n});\n\nexport class RequestPassword extends Component {\n\n    // State\n    state = {\n        email: '',\n        emailError: '',\n        open: false,\n    }\n\n    //  Constructor to bind function with state\n    constructor(props) {\n        super(props)\n        this.handleRegister = this.handleRegister.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.handlePasswordToogle = this.handlePasswordToogle.bind(this)\n        this.flushError = this.flushError.bind(this)\n        this.handleClose = this.handleClose.bind(this)\n    } \n\n    //Handle Password Visibility\n    handlePasswordToogle() {\n        this.setState({ hidden: !this.state.hidden });\n    }\n\n    // Makes Error null\n    flushError() {\n        this.setState({\n            emailError: '',\n        })\n    }\n\n    handleClose() {\n        this.setState({ open: false })\n    }\n\n    //  Recieves new props. Primarily used for Error Handling\n    componentWillReceiveProps(nextProps){\n        if(nextProps.error !== undefined){\n            if(nextProps.error.message === 'Network Error'){\n                this.setState({emailError: nextProps.error.message})\n            }else{\n                if(nextProps.error.response.data && nextProps.error.response.data.error) {\n                    nextProps.error.response.data.error.map(el => {\n                        this.setState({emailError: el.message})\n                    })\n                }\n            }\n        }\n        if(nextProps.success) {\n            this.setState({ open: true })\n        }\n    }\n\n    navigate(route) {\n        this.props.history.push(route);\n    }\n    \n    //  Hadles change of text in textfield \n    onChange(e){\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    //  Handles Login\n    handleRegister(e){\n        e.preventDefault();\n        if (!this.state.email) {return this.setState({ emailError: 'Enter a Email address' })} else {this.flushError()}\n        this.flushError();\n        const body = {email: this.state.email}\n        this.props.resetPassword(body)\n    }\n    \n    render() {\n        const { classes } = this.props;\n        if(this.props.isAuthenticated) {\n            this.navigate('/')\n        }\n        return (\n            <div>\n                <div class=\"rqbox\">\n                    <Typography className=\"headerName\" component=\"h1\" variant=\"h5\">\n                        Reset\n                    </Typography>\n                    <Typography className=\"headerDesc\" variant=\"subtitle1\">\n                        Reqeust access to reset.\n                    </Typography>\n                    <form className=\"loginForm\">\n                        <Grid container xs={12}>\n                            <Grid item xs = {12}>\n                                <AuthField \n                                    name=\"email\" \n                                    placeholder=\"Email\" \n                                    margin='small'\n                                    label=\"Email\" \n                                    error = {this.state.emailError} \n                                    onChange={this.onChange} \n                                    value={this.state.email}/>\n                            </Grid>\n                        </Grid>\n                        <Grid container spacing={3}>\n                            <Grid item xs={6}>\n                                <Button className=\"forgotButton\" color=\"primary\" onClick={()=>this.navigate('/auth/login')}>Login Back</Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Button className=\"loginButton\" variant=\"contained\" onClick={this.handleRegister} disabled={this.props.authLoading ? true : (this.props.success ? true : false)}>{this.props.authLoading ? 'Loading' : 'Reset'}</Button>                        \n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n                <Snackbar\n                    open={this.state.open}\n                    TransitionComponent='Fade'\n                    message=\"Email Send successfully\"\n                    onClose={this.handleClose}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                />\n            </div>\n        );\n    }\n}\n\n//  Map state to props\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    isLoading: state.auth.isLoading,\n    authLoading: state.auth.authLoading,\n    error: state.auth.error,\n    success: state.auth.reset\n  });\n  \n\nexport default connect(mapStateToProps, {resetPassword})(withRouter(withStyles(styles)(RequestPassword)));\n","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/Reducer/index.js",[],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/Action/auth.js",["84"],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Components/TextField/AuthField.js",[],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/Reducer/auth.js",["85","86"],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Store/Action/types.js",[],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Auth/ResetPassword/ResetPassword.js",["87","88","89"],"import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport AuthField from '../../../Components/TextField/AuthField';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { changePassword } from '../../../Store/Action/auth';\nimport {Alert} from 'react-bootstrap';\nimport './RequestPassword.css';\n\nconst styles = theme => ({\n    cssFocused: {\n        borderWidth: '1px',\n        borderColor: '#1a73e8 !important'\n    },\n    notchedOutline: {\n        borderWidth: '1px',\n        borderColor: 'grey !important'\n    },\n    checkBox: {\n        fontSize: '13px',\n    },\n});\n\nexport class ResetPassword extends Component {\n\n    // State\n    state = {\n        password: '',\n        passwordError: '',\n    }\n\n    //  Constructor to bind function with state\n    constructor(props) {\n        super(props)\n        this.onChange = this.onChange.bind(this)\n        this.handlePasswordToogle = this.handlePasswordToogle.bind(this)\n        this.flushError = this.flushError.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n    } \n\n    //Handle Password Visibility\n    handlePasswordToogle() {\n        this.setState({ hidden: !this.state.hidden });\n    }\n\n    // Makes Error null\n    flushError() {\n        this.setState({\n            passwordError: '',\n        })\n    }\n\n    navigate(route) {\n        this.props.history.push(route);\n    }\n    \n    //  Hadles change of text in textfield \n    onChange(e){\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n\n    //  Recieves new props. Primarily used for Error Handling\n    componentWillReceiveProps(nextProps){\n        if(nextProps.error !== undefined){\n            if(nextProps.error.message === 'Network Error'){\n                this.setState({passwordError: nextProps.error.message})\n            }else{\n                if(nextProps.error.response.data && nextProps.error.response.data.error) {\n                    nextProps.error.response.data.error.map(el => {\n                        this.setState({passwordError: el.message})\n                    })\n                }\n            }\n        }\n        if(nextProps.success) { \n            this.navigate('/auth/login')\n        }\n    }\n\n    //  Handles Login\n    handleReset(e){\n        e.preventDefault();\n        if (!this.state.password) {return this.setState({ passwordError: 'Enter a password' })} else {this.flushError()}\n        this.flushError();\n        const body = {newpassword: this.state.password, resetLink: this.props.match.params.token}\n        this.props.changePassword(body)\n    }\n    \n    render() {\n        const { classes } = this.props;\n        if(this.props.isAuthenticated) {\n            this.navigate('/')\n        }\n        return (\n            <div class=\"rqbox\">\n                <Typography className=\"headerName\" component=\"h1\" variant=\"h5\">\n                    Reset\n                </Typography>\n                <Typography className=\"headerDesc\" variant=\"subtitle1\">\n                    Change Password.\n                </Typography>\n                <form className=\"loginForm\">\n                    <Grid container xs={12}>\n                        <Grid item xs = {12}>\n                            <AuthField \n                                name=\"password\" \n                                placeholder=\"Password\" \n                                label=\"Password\" \n                                margin='small'\n                                error = {this.state.passwordError} \n                                onChange={this.onChange} \n                                value={this.state.password}/>\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={3}>\n                        <Grid item xs={6}>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button className=\"loginButton\" variant=\"contained\" onClick={this.handleReset}>Reset</Button>                        \n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n        );\n    }\n}\n\n//  Map state to props\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    isLoading: state.auth.isLoading,\n    authLoading: state.auth.authLoading,\n    error: state.auth.error,\n    success: state.auth.reset\n  });\n  \n\nexport default connect(mapStateToProps, {changePassword})(withRouter(withStyles(styles)(ResetPassword)));\n","/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Dashboard/Index/Dashboard.js",[],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Pages/Dashboard/Home.js",["90","91","92","93","94","95"],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Route/PrivateRoute.js",["96"],"/Users/joan/Documents/Louji/Project/Books/AuthBook/auth/src/Components/Sidebar/Sidebar.js",[],{"ruleId":"97","severity":1,"message":"98","line":1,"column":8,"nodeType":"99","messageId":"100","endLine":1,"endColumn":11},{"ruleId":"97","severity":1,"message":"101","line":13,"column":8,"nodeType":"99","messageId":"100","endLine":13,"endColumn":24},{"ruleId":"102","severity":1,"message":"103","line":81,"column":94,"nodeType":"104","messageId":"105","endLine":81,"endColumn":96},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"97","severity":1,"message":"110","line":3,"column":8,"nodeType":"99","messageId":"100","endLine":3,"endColumn":17},{"ruleId":"102","severity":1,"message":"103","line":85,"column":64,"nodeType":"104","messageId":"105","endLine":85,"endColumn":66},{"ruleId":"102","severity":1,"message":"103","line":69,"column":64,"nodeType":"104","messageId":"105","endLine":69,"endColumn":66},{"ruleId":"97","severity":1,"message":"111","line":99,"column":17,"nodeType":"99","messageId":"100","endLine":99,"endColumn":24},{"ruleId":"97","severity":1,"message":"112","line":156,"column":9,"nodeType":"99","messageId":"100","endLine":156,"endColumn":15},{"ruleId":"97","severity":1,"message":"113","line":3,"column":5,"nodeType":"99","messageId":"100","endLine":3,"endColumn":17},{"ruleId":"114","severity":1,"message":"115","line":25,"column":3,"nodeType":"116","endLine":111,"endColumn":4},{"ruleId":"97","severity":1,"message":"117","line":10,"column":9,"nodeType":"99","messageId":"100","endLine":10,"endColumn":14},{"ruleId":"102","severity":1,"message":"103","line":73,"column":64,"nodeType":"104","messageId":"105","endLine":73,"endColumn":66},{"ruleId":"97","severity":1,"message":"111","line":94,"column":17,"nodeType":"99","messageId":"100","endLine":94,"endColumn":24},{"ruleId":"97","severity":1,"message":"118","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":35},{"ruleId":"97","severity":1,"message":"119","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":22},{"ruleId":"97","severity":1,"message":"120","line":4,"column":8,"nodeType":"99","messageId":"100","endLine":4,"endColumn":16},{"ruleId":"97","severity":1,"message":"121","line":5,"column":8,"nodeType":"99","messageId":"100","endLine":5,"endColumn":20},{"ruleId":"97","severity":1,"message":"122","line":8,"column":9,"nodeType":"99","messageId":"100","endLine":8,"endColumn":21},{"ruleId":"97","severity":1,"message":"123","line":12,"column":7,"nodeType":"99","messageId":"100","endLine":12,"endColumn":14},{"ruleId":"97","severity":1,"message":"124","line":2,"column":20,"nodeType":"99","messageId":"100","endLine":2,"endColumn":25},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'CircularProgress' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["125"],"no-negated-in-lhs",["126"],"'TextField' is defined but never used.","'classes' is assigned a value but never used.","'config' is assigned a value but never used.","'USER_LOADING' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Alert' is defined but never used.","'Suspense' is defined but never used.","'renderRoutes' is defined but never used.","'AppsIcon' is defined but never used.","'MenuBookIcon' is defined but never used.","'PrivateRoute' is defined but never used.","'history' is assigned a value but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation"]